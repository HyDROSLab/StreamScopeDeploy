"""

StreamScope Results

This script reads log files generated by StreamScope and extracts information for plotting.

Currently, the script only generates plots for average distance vs. time for specified angles

Author: Braden White
Last Updated: 02-12-2025

"""

import os
import re
import matplotlib.pyplot as plt
import datetime


def classify_angle(angle, requested_angles, tolerance=1):

    for requested_angle in requested_angles:
        if abs(angle - requested_angle) <= tolerance:
            return requested_angle
    return None 

def read_log_file(file_path, requested_angles, tolerance=1):

    timestamps = []
    data = {angle: [] for angle in requested_angles}
    sonar_distances = []
    
    with open(file_path, "r") as file:
        lines = file.readlines()
    
    for i, line in enumerate(lines):
        line = line.strip()
        
        if line.startswith("Date:") and "Time:" in lines[i + 1]:
            date_str = line.split("Date:")[-1].strip()
            time_str = lines[i + 1].split("Time:")[-1].strip()
            timestamp = f"{date_str} {time_str}"
            timestamp = datetime.datetime.strptime(timestamp, "%d/%m/%Y %H:%M UTC")
            timestamps.append(timestamp)
        
        if line.startswith("Raw Measurements"):
            for j in range(i + 1, len(lines)):
                if lines[j].startswith("Angle (degrees):"):
                    angle = int(lines[j].split("Angle (degrees):")[-1].strip())
                    
                    classified_angle = classify_angle(angle, requested_angles, tolerance)
                    
                    if classified_angle is not None:
                        distances_line = lines[j + 1]
                        distances = list(map(int, distances_line.split(":")[-1].strip().split(", ")))
                        
                        valid_distances = [d for d in distances if d <= 5000]
                        
                        if valid_distances:
                            avg_distance = sum(valid_distances) / len(valid_distances)
                            data[classified_angle].append(avg_distance)

        if line.startswith("Sonar Distance (mm):"):
            sonar_distance = int(line.split(":")[-1].strip())
            if sonar_distance > 2500 or sonar_distance < 0:
                sonar_distance = None
            sonar_distances.append(sonar_distance)
                        
    return timestamps, data, sonar_distances

def plot_graphs(data_all, timestamps_all, sonar_distances):

    plt.figure(figsize=(10, 6))
    
    '''
    for angle in [0]:
        data_for_angle = data_all[angle]
        
        while len(data_for_angle) < len(timestamps_all):
            data_for_angle.append(None)
        
        plt.plot(timestamps_all, data_for_angle, label=f"Angle {angle}Â°")
    '''

    while len(sonar_distances) < len(timestamps_all):
        sonar_distances.append(None)
    
    plt.plot(timestamps_all, sonar_distances, label="Sonar Distance", linestyle="-", color="black")
    plt.axhline(y=1722, color="red", linestyle="--", label="Initial Distance")
    
    plt.xlabel("Time (UTC)")
    plt.ylabel("Average Distance")
    plt.title("StreamScope: Average Distance vs. Time")
    plt.legend()
    plt.xticks(rotation=45)
    plt.ylim(1716, 1734)
    plt.gca().invert_yaxis()
    plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d/%m/%Y %H:%M'))
    plt.gca().xaxis.set_major_locator(plt.matplotlib.dates.MinuteLocator(interval=30))
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(nbins=20))
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":

    while True:
        print("\nStreamScope Results")
        print("1. Angles Over Time.")
        print("2. Exit.")
        choice = input("Select an option: ")

        if choice == '1':
            data_all = {-20: [], 0: [], 20: []}
            timestamps_all = []
            sonar_distances_all = []

            log_files = [f for f in os.listdir("data") if f.endswith(".txt")]
        
            requested_angles = [-20, 0, 20] 
        
            for file_name in log_files:
                file_path = os.path.join("data", file_name)
                timestamps, data, sonar_distances = read_log_file(file_path, requested_angles)

                for angle in data:
                    data_all[angle].extend(data[angle])
                timestamps_all.extend(timestamps)
                sonar_distances_all.extend(sonar_distances)

            plot_graphs(data_all, timestamps_all, sonar_distances_all)
        elif choice == '2':
            break






